// Production Prisma schema with PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  role      Role     @default(TEACHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
  years    Year[]
  groups   Group[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Group {
  id          String @id @default(uuid())
  name        String
  description String?
  
  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  students Student[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, teacherId])
  @@index([teacherId])
  @@index([name])
  @@map("groups")
}

model Student {
  id       String @id @default(uuid())
  fullName String
  notes    String?

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  groupId String?
  group   Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  grades Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
  @@index([groupId])
  @@index([teacherId, groupId])
  @@index([fullName])
  @@map("students")
}

model Year {
  id     String @id @default(uuid())
  year   String
  months String // JSON string of month names

  createdBy String
  teacher   User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  grades Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdBy])
  @@index([year])
  @@map("years")
}

model Criterion {
  id     String @id @default(uuid())
  name   String
  weight Float  // Weight in final grade (0.0-1.0)
  scale  String // Scale description like "0-5" or "1-10"
  order  Int    @default(0) // Display order

  grades CriterionGrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
  @@map("criteria")
}

model Grade {
  id            String @id @default(uuid())
  studentId     String
  yearId        String
  month         String
  attendance    Float? // Attendance percentage
  homework      String?
  comment       String? // General comment
  recommendations String? // Recommendations for improvement
  totalScore    Float? // Calculated total score
  grade         String? // Letter grade (A, B, C, etc.)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  year    Year    @relation(fields: [yearId], references: [id], onDelete: Cascade)

  criteriaGrades CriterionGrade[]
  attachments    Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, yearId, month])
  @@index([studentId])
  @@index([yearId])
  @@index([month])
  @@index([studentId, yearId])
  @@index([yearId, month])
  @@index([createdAt])
  @@map("grades")
}

model CriterionGrade {
  id          String @id @default(uuid())
  gradeId     String
  criterionId String
  value       Float // The actual grade value

  grade     Grade     @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  criterion Criterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([gradeId, criterionId])
  @@index([gradeId])
  @@index([criterionId])
  @@map("criterion_grades")
}

model Attachment {
  id      String @id @default(uuid())
  gradeId String
  name    String
  url     String
  type    String // File type/extension

  grade Grade @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradeId])
  @@map("attachments")
}

model GradeScale {
  id          String @id @default(uuid())
  letter      String // A, B, C, etc.
  minScore    Float
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grade_scales")
}

enum Role {
  TEACHER
  ADMIN
}